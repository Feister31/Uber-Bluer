f <- FALSE
g <- T
h <- F
# A vector is a basic unit of data structure in R
# All elements in a vector must be of the same type
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
print(disney_characters)
print(presidents)
print(numbers_vector)
# R is a one-index language!
presidents[1]
### Combine vectors into a single vector
combined_vector <- c(disney_characters, presidents)
combined_vector
### A for-loop
for (x in combined_vector) {
print(x)
}
# Operate over an entire vector en masse
numeric_vector <- 1:length(combined_vector)
squared_vector <- numeric_vector**2
print(combined_vector)
print(numeric_vector)
print(squared_vector)
# An if/else statement
# nchar() returns the number of characters
for (prez in presidents) {
if (nchar(prez) > 5) {
next
}
else {
print(prez)
}
}
# A list, unlike a vector, can contain various data types
random_list <- list("movies"=c("Star Wars", "Titanic", "Avatar"),
"states"=c("California", "Oklahoma", "Texas", "Virginia"),
"coins"=c("penny", "dime", "nickel", "quarter"),
"first_presidents"=presidents,
"nums"=c(1,2,3,4,5),
"bools"=c(T,F,T,T,T,F)
)
# We can use the bracket notation to access an item in a list:
random_list["states"]
# Or use the $ sign
random_list$coins
# Verify type
typeof(random_list)
source("~/Desktop/Classwork/R_Notebook 2/Day-01/01_Ins_RBasics/Solved/01_Ins_RBasics.R")
# Character
c <- "This is a string"
source("~/Desktop/Classwork/R_Notebook 2/Day-01/01_Ins_RBasics/Solved/01_Ins_RBasics.R")
install.packages("tidyverse")
sardines
sardines
sardines
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
population1 = subset(sardines, location == 1)
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
population1 = subset(sardines, location == 1)
# Calculate the population mean for Sardine Vertebrae in San Diego.
# Hint: use the subset() function to get only the data for San Diego.
population2 = subset(sardines, location == 6)
mean(population2[['vertebrae']])
source("~/Desktop/Classwork/R_Notebook 2/Day-02/03-Stu_Sardines/Solved/sardines.R")
library(ggplot2)
library(ggthemes)
library(ggplot2)
library(ggthemes)
install.packages("ggthemes)"
library(ggthemes)
install.packages("ggthemes")
install.packages("lubridate")
library(lubridate)
library(dplyr)
setwd('/home/dataflair/data/Uber Analysis')
setwd("~/Uber analysis")
colors = c(""#CC1011", "#665555", "#05a399", "#cfcaca", "#f5e840", "#0683c9", "#e075b0"")
data_2014$dayofweek <- factor(wday(data_2014$Date.Time, label = TRUE))
data_2014$dayofweek <- factor(wday(data_2014$Date.Time, label = TRUE))
apr_data <- read.csv("uber-raw-data-apr14.csv")
setwd("~/Desktop/thisisnedir")
library(scales)
setwd('/home/dataflair/data/Uber Analysis')
apr_data <- read.csv("uber-raw-data-apr14.csv")
may_data <- read.csv("uber-raw-data-may14.csv")
jun_data <- read.csv("uber-raw-data-jun14.csv")
jul_data <- read.csv("uber-raw-data-jul14.csv")
aug_data <- read.csv("uber-raw-data-aug14.csv")
sep_data <- read.csv("uber-raw-data-sep14.csv")
data_2014 <- rbind(apr_data,may_data, jun_data, jul_data, aug_data, sep_data)
data_2014$Date.Time <- as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
data_2014$Time <- format(as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")
data_2014$Date.Time <- ymd_hms(data_2014$Date.Time)
data_2014$day <- factor(day(data_2014$Date.Time))
data_2014$month <- factor(month(data_2014$Date.Time, label = TRUE))
data_2014$year <- factor(year(data_2014$Date.Time))
data_2014$dayofweek <- factor(wday(data_2014$Date.Time, label = TRUE))
data_2014$day <- factor(day(data_2014$Date.Time))
data_2014$month <- factor(month(data_2014$Date.Time, label = TRUE))
data_2014$year <- factor(year(data_2014$Date.Time))
data_2014$dayofweek <- factor(wday(data_2014$Date.Time, label = TRUE))
data_2014$hour <- factor(hour(hms(data_2014$Time)))
data_2014$minute <- factor(minute(hms(data_2014$Time)))
data_2014$second <- factor(second(hms(data_2014$Time)))
datatable(hour_data)
ggplot(month_hour, aes(hour, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Hour and Month") +
scale_y_continuous(labels = comma)
View(apr_data)
View(aug_data)
View(data_2014)
View(jul_data)
View(jun_data)
View(may_data)
View(sep_data)
source("~/Desktop/thisisnedir/Uber analysis.R")
install.packages("ggthemes")
install.packages(DT)
install.packages("DT")
datatable(hour_data)
hour_data <- data_2014 %>%
group_by(hour) %>%
dplyr::summarize(Total = n())
install.packages("dplyr")
source("~/Desktop/thisisnedir/Uber analysis.R")
